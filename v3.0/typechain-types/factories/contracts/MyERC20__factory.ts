/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  BigNumberish,
  Overrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type { MyERC20, MyERC20Interface } from "../../contracts/MyERC20";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_supply",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
    ],
    name: "allowance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "allowances",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_owner",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_value",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [
      {
        internalType: "bool",
        name: "success",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_from",
        type: "address",
      },
      {
        internalType: "address",
        name: "_to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_value",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [
      {
        internalType: "bool",
        name: "success",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60806040523480156200001157600080fd5b5060405162001035380380620010358339818101604052810190620000379190620001d2565b6200006b7f375486f1cba6d9e1857f1d3aee7cc94fb5c07e3edf20389e3dc0e520199c68ae60001b6200018f60201b60201c565b6200009f7f124856f694d2176657457b01f5902807dd0d77a41e43bece0a673c9cae81733660001b6200018f60201b60201c565b620000d37f9035c1eeb99bd54a435a9cc6492d98bdeca7c5e78a617e0ae73e3f3890ea386060001b6200018f60201b60201c565b806000819055506200010e7f2c0737c780c17dcafb593ffa9825f3dabcb3157397cf6629d4a5bf45192f478f60001b6200018f60201b60201c565b620001427f213bad478a01733d8e77816607b2389fc2587a56420baf8a5b95363159cce91460001b6200018f60201b60201c565b600054600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505062000204565b50565b600080fd5b6000819050919050565b620001ac8162000197565b8114620001b857600080fd5b50565b600081519050620001cc81620001a1565b92915050565b600060208284031215620001eb57620001ea62000192565b5b6000620001fb84828501620001bb565b91505092915050565b610e2180620002146000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c806355b6ed5c1161005b57806355b6ed5c1461010057806370a0823114610130578063a9059cbb14610160578063dd62ed3e146101905761007d565b8063095ea7b31461008257806318160ddd146100b257806323b872dd146100d0575b600080fd5b61009c60048036038101906100979190610bf4565b6101c0565b6040516100a99190610c4f565b60405180910390f35b6100ba610329565b6040516100c79190610c79565b60405180910390f35b6100ea60048036038101906100e59190610c94565b6103b7565b6040516100f79190610c4f565b60405180910390f35b61011a60048036038101906101159190610ce7565b6106ff565b6040516101279190610c79565b60405180910390f35b61014a60048036038101906101459190610d27565b610724565b6040516101579190610c79565b60405180910390f35b61017a60048036038101906101759190610bf4565b6107f1565b6040516101879190610c4f565b60405180910390f35b6101aa60048036038101906101a59190610ce7565b610a4d565b6040516101b79190610c79565b60405180910390f35b60006101ee7f5040f0e679244c9c889f93f4a2f0edc83da2fed1d0068f100c70824a1273fd7b60001b610b58565b61021a7fa03638ae728ecd501e71e8d80fa7cf3c65400bb4551eb439a48624d589b7182660001b610b58565b6102467f69d1dd7ca6c88b55168f499226ed2648ee47d9cbe931af742595dc9c7b56b62c60001b610b58565b81600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506102f37f0787ea44cb3bb147ad96b341c91b1f6cd95ced85cabc057a2a6acc623a646e9e60001b610b58565b61031f7f8d0102e44bc8a2220ba55fb8fba41bde675eac4db1892dbd6b1c4f54afed109560001b610b58565b6001905092915050565b60006103577f54c5666ddd153a0490562b70c7b225d103d1cc9ee9ee2c03dcd8615c5db8f85960001b610b58565b6103837f3ab2d43d8561b7d094fc25647a669dc21fd0819b438d8e43e71a219c9a3ad85d60001b610b58565b6103af7f47fd2a133b6d69da0cd0b2cb411fb8a6f0b9e9c2d60378f48cd9e031e504709760001b610b58565b600054905090565b60006103e57f538f68b3683c1fff185752197dba1366e0a8c6cee8460cb9af1a7431f187117c60001b610b58565b6104117fa9ca9dae1dd7507a44ae25ed645b24e23d8737d73af5a03a9599ef42466bab8660001b610b58565b61043d7f6d6f4fb1d81bbfc02131c62f89631b29abfc14710a89224e6b8135e328d8c5a360001b610b58565b81600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546104c99190610d83565b925050819055506104fc7f560680bacc03051f095da0649b3ce5ddfd390f4db578410e6f483ba6f4c7d07260001b610b58565b6105287f61a80238d1817ea35f8d37e88552e3a6725054c85d5d31f0c8dadde2df5f339260001b610b58565b81600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546105739190610d83565b600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506105e27fc355402b69a7a52aa703274e1241562082e5b629db5ebf25f5c6609d7a195ce260001b610b58565b61060e7f7499bd7c7cd37f6089a491fafcaacd48d9d21f7aca6d2e0dddbac6ee5a43f2c860001b610b58565b81600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546106599190610db7565b600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506106c87f47989b19e4f20252bc9fc24fa4bc233fe41db3218a66c9d348e1477b30c98e5460001b610b58565b6106f47facffd92a032f2faf9b40fb6c55a6f0ea3f8d2d8120c0dc6d601fc049ec68aa3d60001b610b58565b600190509392505050565b6002602052816000526040600020602052806000526040600020600091509150505481565b60006107527fd312882b35dc226995bd2de4637603b7384566e9622768f74044b50d0d107e3360001b610b58565b61077e7fa396dd6dab1c41dcaac85706c8eb2d552f3117eb4d31daf5a4fdcb840aa0d9fd60001b610b58565b6107aa7fc804f5d4ed45b64cbb079cd451572f2d622aeeff9d4345f24c419a7ace3c53ce60001b610b58565b600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600061081f7f69d02f16590e7f7355de393c28f991a129b1737b74324b4a883ee49797dbb57d60001b610b58565b61084b7f5a64421942003939fc5b6203baa39b443c2f556e56e37a6c5de723b0d657f82d60001b610b58565b6108777fb0f4fa048c3848ba6caa1828b7b6eef2bdfde2d6587695204285677796b4a92960001b610b58565b81600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546108c29190610d83565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506109317f24dada202180ae80e7c64f7c24f375af63b5982d57f94e32ffa9d838dc13b0e760001b610b58565b61095d7f5975a04ea9c1a0458439d417e23cb99a7ed782b72aa80d44c5686668a9faba3a60001b610b58565b81600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546109a89190610db7565b600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610a177fb392c6cc9f38a9cab8bc35d849bc73977df36eeb3613c175835b263861193a6660001b610b58565b610a437fc2ff29cbcb0a1f6aa3ca0fe72a384e5ebbcbc6bd29a55a919442b170394acf3860001b610b58565b6001905092915050565b6000610a7b7fc819e67d08b0146318c0c50130bb7c60d4edf4f41b502c92ab5a3340b05d653260001b610b58565b610aa77ffb79649e3ae93332da168c570b1756b595d43f3bb5adfcec73a501b37485d5b460001b610b58565b610ad37f443206b4c2736644181832cd56edc186a5e5e8458e2e760a018a237e82c039f560001b610b58565b600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b50565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610b8b82610b60565b9050919050565b610b9b81610b80565b8114610ba657600080fd5b50565b600081359050610bb881610b92565b92915050565b6000819050919050565b610bd181610bbe565b8114610bdc57600080fd5b50565b600081359050610bee81610bc8565b92915050565b60008060408385031215610c0b57610c0a610b5b565b5b6000610c1985828601610ba9565b9250506020610c2a85828601610bdf565b9150509250929050565b60008115159050919050565b610c4981610c34565b82525050565b6000602082019050610c646000830184610c40565b92915050565b610c7381610bbe565b82525050565b6000602082019050610c8e6000830184610c6a565b92915050565b600080600060608486031215610cad57610cac610b5b565b5b6000610cbb86828701610ba9565b9350506020610ccc86828701610ba9565b9250506040610cdd86828701610bdf565b9150509250925092565b60008060408385031215610cfe57610cfd610b5b565b5b6000610d0c85828601610ba9565b9250506020610d1d85828601610ba9565b9150509250929050565b600060208284031215610d3d57610d3c610b5b565b5b6000610d4b84828501610ba9565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610d8e82610bbe565b9150610d9983610bbe565b9250828203905081811115610db157610db0610d54565b5b92915050565b6000610dc282610bbe565b9150610dcd83610bbe565b9250828201905080821115610de557610de4610d54565b5b9291505056fea2646970667358221220729010eae0410bed89066854492394f5ef4d68593880cea0363312601748d4ba64736f6c63430008110033";

type MyERC20ConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MyERC20ConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MyERC20__factory extends ContractFactory {
  constructor(...args: MyERC20ConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _supply: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<MyERC20> {
    return super.deploy(_supply, overrides || {}) as Promise<MyERC20>;
  }
  override getDeployTransaction(
    _supply: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_supply, overrides || {});
  }
  override attach(address: string): MyERC20 {
    return super.attach(address) as MyERC20;
  }
  override connect(signer: Signer): MyERC20__factory {
    return super.connect(signer) as MyERC20__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MyERC20Interface {
    return new utils.Interface(_abi) as MyERC20Interface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MyERC20 {
    return new Contract(address, _abi, signerOrProvider) as MyERC20;
  }
}
