/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  BigNumberish,
  Overrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../common";
import type {
  BasicDutchAuction,
  BasicDutchAuctionInterface,
} from "../BasicDutchAuction";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_reservePrice",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_numBlocksAuctionOpen",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_offerPriceDecrement",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "bid",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "finalize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "getBlockNumber",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "refundAmount",
        type: "uint256",
      },
    ],
    name: "refund",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60806040523480156200001157600080fd5b50604051620011c2380380620011c2833981810160405281019062000037919062000187565b6200005367c3b04d5ea84c6e5760c01b6200014460201b60201c565b6200006f67bf6ff120a0a92d9960c01b6200014460201b60201c565b82600381905550620000926773a17d7278bf2b7e60c01b6200014460201b60201c565b81600481905550620000b567663a48ea538d848f60c01b6200014460201b60201c565b80600581905550620000d867765423d5246d1cbc60c01b6200014460201b60201c565b336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506200013467ac27303877fb8ae260c01b6200014460201b60201c565b43600281905550505050620001e3565b50565b600080fd5b6000819050919050565b62000161816200014c565b81146200016d57600080fd5b50565b600081519050620001818162000156565b92915050565b600080600060608486031215620001a357620001a262000147565b5b6000620001b38682870162000170565b9350506020620001c68682870162000170565b9250506040620001d98682870162000170565b9150509250925092565b610fcf80620001f36000396000f3fe60806040526004361061003f5760003560e01c80631998aeef14610044578063278ecde11461006257806342cbb15c1461008b5780634bb278f3146100b6575b600080fd5b61004c6100cd565b6040516100599190610a30565b60405180910390f35b34801561006e57600080fd5b5061008960048036038101906100849190610a86565b6103da565b005b34801561009757600080fd5b506100a06106b3565b6040516100ad9190610ac2565b60405180910390f35b3480156100c257600080fd5b506100cb6106f7565b005b60006100e367f8fae0547479df8460c01b6109ec565b6100f767ae34793fc0fee28a60c01b6109ec565b61010b67ad969f5b0695284860c01b6109ec565b61011f672e17d31e0df44d0c60c01b6109ec565b600760009054906101000a900460ff161561016f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161016690610b3a565b60405180910390fd5b6101836716e47f047b6b5d3c60c01b6109ec565b6101976775194c4365c4dddd60c01b6109ec565b6101ab6726459433b957dfa460c01b6109ec565b6101bf671be99284c032222760c01b6109ec565b6004546002546101cf9190610b89565b4310610210576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161020790610c09565b60405180910390fd5b610224676dfd8634f3f7da8f60c01b6109ec565b6102386709c8fd99745c767360c01b6109ec565b61024c6754ac877bd16cc6a260c01b6109ec565b610260677008590e9af99f4160c01b6109ec565b436004546002546102719190610b89565b61027b9190610c29565b6005546102889190610c5d565b6003546102959190610b89565b3410156102d7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102ce90610d11565b60405180910390fd5b6102eb677fe89dcfb349883860c01b6109ec565b6102ff679a22721f3e0eef0160c01b6109ec565b6001600760006101000a81548160ff02191690831515021790555061032e671c057e87ccd5242460c01b6109ec565b33600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555061038367475ce1806a896cf260c01b6109ec565b3460068190555061039e676e1b0d9671268c8060c01b6109ec565b6103b2673e5166007eff911c60c01b6109ec565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6103ee67ffac9fb664531cec60c01b6109ec565b61040267bac6ff56cc5519bf60c01b6109ec565b610416676a1f106bef2034e560c01b6109ec565b61042a67647568583c48945960c01b6109ec565b600760009054906101000a900460ff16610479576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161047090610d7d565b60405180910390fd5b61048d67acc3d35f459b84eb60c01b6109ec565b6104a167cd46c71305b6ad0760c01b6109ec565b6104b5672f2cb0c80a40634d60c01b6109ec565b6104c9671cd8a5e49a26eae660c01b6109ec565b600760019054906101000a900460ff1615610519576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161051090610de9565b60405180910390fd5b61052d67a752e138b243734e60c01b6109ec565b610541675c40030ac45f6d5e60c01b6109ec565b61055567767aa0d50029f10e60c01b6109ec565b600081905061056e67010d5932aedceeb160c01b6109ec565b61058267cb1004db95bd03de60c01b6109ec565b6105966741d60a392bcdbfef60c01b6109ec565b6006548111156105db576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105d290610e7b565b60405180910390fd5b6105ef6766a95d56af39be2c60c01b6109ec565b61060367b455fb67dda8912c60c01b6109ec565b6001600760016101000a81548160ff0219169083151502179055506106326707ed40890e7c799460c01b6109ec565b6106466718a842edc3bbb6d460c01b6109ec565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc839081150290604051600060405180830381858888f193505050501580156106ae573d6000803e3d6000fd5b505050565b60006106c96731f12a16718b2a1360c01b6109ec565b6106dd67c63338d130c1b11160c01b6109ec565b6106f167a1b0622f16623d2660c01b6109ec565b43905090565b61070b67e10acd19da615f4960c01b6109ec565b61071f67b0effc154973580760c01b6109ec565b6107336797ae4f485a81d36660c01b6109ec565b610747673b83175f5d318ad660c01b6109ec565b600760009054906101000a900460ff16610796576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161078d90610d7d565b60405180910390fd5b6107aa670b8ce04768fcecfa60c01b6109ec565b6107be678ae707146b44372c60c01b6109ec565b6107d267f8df2a5cf3927f8160c01b6109ec565b6107e66790283edfe0280e5460c01b6109ec565b600760019054906101000a900460ff1615610836576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161082d90610ee7565b60405180910390fd5b61084a67be69de02d584606160c01b6109ec565b61085e6704e172a5916781f160c01b6109ec565b61087267d06d1cf4adbe3bfa60c01b6109ec565b6108866716a55dfddcccd68960c01b6109ec565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610916576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161090d90610f79565b60405180910390fd5b61092a67e35a85f268c7faf560c01b6109ec565b61093e6749e0025ea1dcc81060c01b6109ec565b6001600760016101000a81548160ff02191690831515021790555061096d67edf34ac0067203cb60c01b6109ec565b610981671ac4669c4f3bf7c760c01b6109ec565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc6006549081150290604051600060405180830381858888f193505050501580156109e9573d6000803e3d6000fd5b50565b50565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610a1a826109ef565b9050919050565b610a2a81610a0f565b82525050565b6000602082019050610a456000830184610a21565b92915050565b600080fd5b6000819050919050565b610a6381610a50565b8114610a6e57600080fd5b50565b600081359050610a8081610a5a565b92915050565b600060208284031215610a9c57610a9b610a4b565b5b6000610aaa84828501610a71565b91505092915050565b610abc81610a50565b82525050565b6000602082019050610ad76000830184610ab3565b92915050565b600082825260208201905092915050565b7f54686520636f6d6d6f6469747920686173206265656e20626f75676874000000600082015250565b6000610b24601d83610add565b9150610b2f82610aee565b602082019050919050565b60006020820190508181036000830152610b5381610b17565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610b9482610a50565b9150610b9f83610a50565b9250828201905080821115610bb757610bb6610b5a565b5b92915050565b7f6f7574206f6620626c6f636b206e756d62657200000000000000000000000000600082015250565b6000610bf3601383610add565b9150610bfe82610bbd565b602082019050919050565b60006020820190508181036000830152610c2281610be6565b9050919050565b6000610c3482610a50565b9150610c3f83610a50565b9250828203905081811115610c5757610c56610b5a565b5b92915050565b6000610c6882610a50565b9150610c7383610a50565b9250828202610c8181610a50565b91508282048414831517610c9857610c97610b5a565b5b5092915050565b7f596f75722076616c7565206973206c6f776572207468616e207265736572766560008201527f5072696365000000000000000000000000000000000000000000000000000000602082015250565b6000610cfb602583610add565b9150610d0682610c9f565b604082019050919050565b60006020820190508181036000830152610d2a81610cee565b9050919050565b7f7468652061756374696f6e20697320676f696e67000000000000000000000000600082015250565b6000610d67601483610add565b9150610d7282610d31565b602082019050919050565b60006020820190508181036000830152610d9681610d5a565b9050919050565b7f7468652061756374696f6e206861732073746f70706564000000000000000000600082015250565b6000610dd3601783610add565b9150610dde82610d9d565b602082019050919050565b60006020820190508181036000830152610e0281610dc6565b9050919050565b7f726566756e64206d757374206c6f776572207468616e2077696e6e696e67426960008201527f6400000000000000000000000000000000000000000000000000000000000000602082015250565b6000610e65602183610add565b9150610e7082610e09565b604082019050919050565b60006020820190508181036000830152610e9481610e58565b9050919050565b7f7468652061756374696f6e206861732066696e616c697a656400000000000000600082015250565b6000610ed1601983610add565b9150610edc82610e9b565b602082019050919050565b60006020820190508181036000830152610f0081610ec4565b9050919050565b7f73656e6465722041646472657373206f73206e6f7420657175616c20746f207760008201527f696e6e6572416464726573730000000000000000000000000000000000000000602082015250565b6000610f63602c83610add565b9150610f6e82610f07565b604082019050919050565b60006020820190508181036000830152610f9281610f56565b905091905056fea26469706673582212202be9f17eb97aeee5ae2dd7860c172a99abb02bdaa7aa42563fac69fc5146054b64736f6c63430008110033";

type BasicDutchAuctionConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: BasicDutchAuctionConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class BasicDutchAuction__factory extends ContractFactory {
  constructor(...args: BasicDutchAuctionConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _reservePrice: PromiseOrValue<BigNumberish>,
    _numBlocksAuctionOpen: PromiseOrValue<BigNumberish>,
    _offerPriceDecrement: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<BasicDutchAuction> {
    return super.deploy(
      _reservePrice,
      _numBlocksAuctionOpen,
      _offerPriceDecrement,
      overrides || {}
    ) as Promise<BasicDutchAuction>;
  }
  override getDeployTransaction(
    _reservePrice: PromiseOrValue<BigNumberish>,
    _numBlocksAuctionOpen: PromiseOrValue<BigNumberish>,
    _offerPriceDecrement: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _reservePrice,
      _numBlocksAuctionOpen,
      _offerPriceDecrement,
      overrides || {}
    );
  }
  override attach(address: string): BasicDutchAuction {
    return super.attach(address) as BasicDutchAuction;
  }
  override connect(signer: Signer): BasicDutchAuction__factory {
    return super.connect(signer) as BasicDutchAuction__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): BasicDutchAuctionInterface {
    return new utils.Interface(_abi) as BasicDutchAuctionInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): BasicDutchAuction {
    return new Contract(address, _abi, signerOrProvider) as BasicDutchAuction;
  }
}
